@model IEnumerable<DataPoint>
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Run Chart";
    var dataRefreshIntervalMinutes = Configuration["RunChartSettings:DataRefreshIntervalMinutes"];
}

<h2>@ViewData["Title"]</h2>

<div>
    <canvas id="myChart" width="600" height="400"></canvas>

    <script>
        var dataRefreshIntervalMinutes = @Json.Serialize(dataRefreshIntervalMinutes);

        function fetchData() {
            $.get('/RunChart/RefreshData', function (data) {
                console.log('Data received:', data);
                var chart = myChart;
                chart.data.labels = data.map(item => item.X);
                chart.data.datasets[0].data = data.map(item => item.Y);
                chart.update();
            });
        }

        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Select(item => item.X))),
                datasets: [{
                    label: 'Run Chart',
                    data: @Html.Raw(Json.Serialize(Model.Select(item => item.Y))),
                    borderColor: 'blue',
                    backgroundColor: 'transparent',
                    pointRadius: 8,
                    pointStyle: 'circle',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                title: {
                    display: true,
                    text: 'Run Chart'
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Value'
                        },
                        beginAtZero: true,
                        min: 0,
                        max: 100
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return context.parsed.y;
                            }
                        }
                    }
                }
            }
        });

        // Periodically fetch new data based on the configured time interval
        setInterval(fetchData, dataRefreshIntervalMinutes*60*1000);
    </script>


</div>
